#!/usr/bin/env bun

import { parseArgs } from "util";
import { version } from "../package.json";
import { renderFile } from "./renderFile";
import path from "path";
import YAML from 'json-to-pretty-yaml';

// welcome to my bad cli :)

function color(text: string, color: string) {
  return `${Bun.color(color, "ansi-256")}${text}\x1b[0m`
}

function help() {
	console.log(`Usage: bunx buny ${color("[...flags]", "#0087af")} ${color("<tsx file>", "green")}`)
	console.log(color("Flags:", "#0087af"))
	console.log(color("  -h, --help", "#0087af"))
	console.log(color("  -o, --output <file>", "#0087af"))
	console.log(color("  -v, --version", "#0087af"))
}

let { values, positionals } = parseArgs({
	args: Bun.argv,
	options: {
		help: {
			short: 'h',
			type: 'boolean',
		},
		out: {
			short: 'o',
			type: 'string',
			multiple: true,
		},
		version: {
			short: 'v',
			type: 'boolean',
		}
	},
	strict: true,
	allowPositionals: true,
});

if (values.help) {
	help()
	process.exit(0)
} else if (values.version) {
	console.log(version)
	process.exit(0)
}

const files = positionals.slice(2)
if (files.length === 0) {
	console.error("No files provided")
	help()
	process.exit(1)
}

if (values.out && values.out.length !== files.length && values.out.length !== 1) {
	console.error("Number of output files does not match number of input files")
	help()
	process.exit(1)
}

for (let i = 0; i < files.length; i++) {
	const filePath = files[i]
	const writer = values.out ? Bun.file(values.out[i % values.out.length]).writer() : process.stdout

	const resolvedPath = path.resolve(process.cwd(), filePath)
	const { fulfilled, failures } = await renderFile(resolvedPath)

	if (failures.length > 0) {
		console.error(`Failed to render the following resources:\n`)
		for (const { key, result } of failures) {
			if (result.status === 'rejected') {
				console.error(`- ${key}: ${result.reason}\n`)
			}
		}
		process.exit(1)
	}


	writer.write(`# ${path.basename(filePath)}\n`)
	writer.write(`# Generated by buny v${version}\n`)
	writer.write(`# ${new Date().toISOString()}\n`)

	for (const { key, result } of fulfilled) {
		if (result.status !== 'fulfilled') continue;
		writer.write(`--- # ${key}\n`)
		writer.write(YAML.stringify(result.value))
	}
	writer.end()
}